find.package("devtools")
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
add2 <- function(x,y) {
x+y
}
add2(3,5)
above10 <- function(x){
use <- x>10
x[use]
}
x
x<- 1:15
above10(x)
above <- function(x,n){
use <- x>n
x[use]
}
x <- 2:12
above(x,10)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(,i)
}
means
}
columnmean(airquality)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean(airquality)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
clear
irisaverage(iris)
library(datasets)
data(iris)
irisaverage(iris)
irisaverage <- function(x) {
head(x)
}
irisaverage(iris)
irisaverage <- function(x) {
s<-split(x, x$species)
print(s)
}
irisaverage(iris)
irisaverage <- function(x) {
s<-split(x, x$Species)
print(s)
}
irisaverage(iris)
irisaverage <- function(x) {
s<-split(x, x$Species)
tx <- tapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
print(tx)
}
irisaverage(iris)
irisaverage(iris)
irisaverage <- function(x) {
s<-split(x, x$Species)
tx <- tapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
print(tx)
}
irisaverage <- function(x) {
s<-split(x, x$Species)
tx <- tapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
print(tx)
}
irisaverage <- function(x) {
s<-split(x, x$Species)
tx <- tapply(s, function(x)colMeans(x[,c("Sepal.Length")]))
print(tx)
}
irisaverage(iris)
irisaverage <- function(x) {
s<-split(x, x$Species)
##tx <- tapply(s, function(x)colMeans(x[,c("Sepal.Length")]))
tx <- tapply(iris$sepal.len, list(iris$species), mean)
print(tx)
}
irisaverage(iris)
irisaverage <- function(x) {
##s<-split(x, x$Species)
##tx <- tapply(s, function(x)colMeans(x[,c("Sepal.Length")]))
tx <- tapply(iris$sepal.len, list(iris$species), mean)
print(tx)
}
irisaverage(iris)
irisaverage <- function() {
##s<-split(x, x$Species)
##tx <- tapply(s, function(x)colMeans(x[,c("Sepal.Length")]))
tx <- tapply(iris$sepal.len, list(iris$species), mean)
print(tx)
}
irisaverage(iris)
irisaverage()
irisaverage <- function() {
##s<-split(x, x$Species)
##tx <- tapply(s, function(x)colMeans(x[,c("Sepal.Length")]))
tx <- tapply(iris$Sepal.length, list(iris$Species), mean)
print(tx)
}
irisaverage()
irisaverage <- function(x) {
s<-split(x, x$Species)
tx <- tapply(x$Sepal.Length, x$Species, mean)
print(tx)
}
irisaverage(iris)
irisaverage <- function(x) {
## s<-split(x, x$Species)
tx <- tapply(x$Sepal.Length, x$Species, mean)
print(tx)
}
irisaverage(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
debug(ls)
ls
with(mtcars, tapply(hp, cyl, mean))
args(mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set =set, get=get, setmean = setmean, getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set =set, get=get, setmean = setmean, getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
exit
quit
pollutantmean <- function(directory, pollutant, id=1:332){
avg <- numeric()
obs <- numeric()
mul <- numeric()
x <- numeric()
x<- 1
for(i in id) {
avg[x] = datafiles(i,pollutant,directory)
obs[x] = onefile(i,pollutant,directory)
mul[x] = avg[x] * obs[x]
x <- x+1
}
finalmean <- numeric()
finalmean <- sum(mul)/sum(obs)
round(finalmean,3)
}
datafiles <- function(id,pollutant,directory) {
##converting no. to a string, reading a file, finding average of sulfate or nitrate
##content depending on user input. MEAN of JUST ONE FILE
numberstring <- character()
numberstring <- sprintf("%03d", id)
numberstring <- paste(numberstring, ".csv", sep='')
midata <- read.csv(paste(directory,"/",numberstring,sep=""))
if(pollutant == "sulfate"){
x<- 2
}
else if(pollutant == "nitrate") {
x<- 3}
else {x <- null}
rows <- numeric()
aver <- numeric()
rows<- onefile(id,pollutant,directory)
if(rows==0){
aver = 0
}
else{
aver <- mean(midata[,x], na.rm = TRUE)
}
aver
}
onefile <- function(id,pollutant,directory) {
## finding dimension(rows and columns) and finding just rows without NA
if(pollutant == "sulfate") {x<-2} else {x<-3}
midata <- read.csv(paste(directory,"/",filenames(id),sep=""))
midata <- midata[complete.cases(midata[,c(x)]), ]
dim(midata)
nrow(midata)
}
filenames <- function(id) {
## converting no. to a string to call filenames
numberstring <- character()
numberstring <- sprintf("%03d", id)
numberstring <- paste(numberstring, ".csv", sep="")
numberstring
}
exit()
quit()
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
y
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
x = c(1,6,2)
y = c(1,4,3)
rm(ls())
rm(list = ls())
x = c(1,6,2)
y = c(1,4,3)
list = ls()
ls()
rm(list)
rm(x)
x = c(1,6,2)
list = ls()
rm(list)
list = ls()
rm(list = ls())
x = c(1,6,2)
y = c(1,4,3)
list = ls()
rm(list)
list = ls()
rm(list = ls())
x=matrix(data = c(1,2,3,4), nrow=2, ncol=2)
x
x=matrix(data = c(1,2,3,4), nrow=2, ncol=2, byrow=TRUE)
x
matrix(data = c(1,2,3,4), nrow=2, ncol=2, byrow=TRUE)
sqrt(x)
matrix(data = c(1,2,3,4), nrow=2, ncol=2)
sqrt(x)
x^2
x=rnorm(50)
x
rnorm(50)
x=rnorm(50, mean=50, sd=.1)
x
x=rnorm(50, mean=50, sd=1)
x
rnorm(50)
set.seed(20)
rnorm(20)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sd(y)
plot(x,y)
rm(x,y)
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y, xlab = "Hero", ylab = 'villain', main = 'movie')
figure = plot(x,y, xlab = "Hero", ylab = 'villain', main = 'movie')
pdf("figure.pdf")
figure = plot(x,y, xlab = "Hero", ylab = 'villain', main = 'movie')
dev.off()
ls
ls()
dir
